{"name":"Jisp","tagline":"JavaScript written lisp interpreter","body":"# jisp\r\nLittle JavaScript Lisp Interpreter\r\n\r\n## Run\r\nRepl:\r\n```node jisp.js -r```\r\n\r\nFile:\r\n```node jisp.js file.lisp```\r\n\r\n\r\n## Commands\r\n###Math and logic\r\n  - `(+ 1 2 3)` - equals to 6 (1 + 2 + 3)\r\n  - `(- 10 1 1)` - equals to 8 (10 - 1 - 1)\r\n  - `(* 1 2 3)` - equals to 9 (1 * 2 * 3)\r\n  - `(/ 100 4 5)` - equals to 5 (100 / 4 = 25 -> 25 / 5 = 5)\r\n  - `(> 10 11)` - false (10 > 11)\r\n  - `(< 10 11)` - true (10 < 11)\r\n  - `(or (>= 10 10) (< 3 2))` - true (equals to (10 >= 10 || 3 < 2))\r\n  - `(and (>= 10 10) (< 3 2))` - false (equals to (10 >= 10 && 3 < 2))\r\n  - `(not true)` - false\r\n  - `(eq? 1 1)` - true (strong equality)\r\n  - `(= 1 1)` - true (== equality)\r\n  - `(eq? (1 2) (1 2))` - true (lists comparsion)\r\n  - `(= (1 2) (1 2))` - false (week comparsion don't take lists)\r\n\r\n###Definitions\r\n`(def var 100)` - defines global variable `var` with value `100`\r\n\r\n`(def xv var)` - defines global variable `xv` with value `100` dereferenced from `var` variable\r\n\r\n```lisp\r\n(def result ; define global variable with value of sum of local vars\r\n  (let (x 10 y 20) ; here x and y are local variables \r\n    (+ x y))) ;final result \r\n(log result) \r\n> 30\r\n```\r\n\r\n###Functions\r\nDefinition of anonymous functions:\r\n```lisp \r\n;define var with name fac which is lambda-function\r\n(def fac\r\n  (lambda(n)\r\n    (if (<= n 2)\r\n        2\r\n        (* n (fac (- n 1))))))\r\n```\r\nOr use `defun` macros:\r\n```lisp\r\n(defun inc(x) (+ x 1)) ; increment function\r\n(defun dec(x) (- x 1)) ; decrement function\r\n```\r\n\r\n####Let-bindings\r\n```lisp\r\n(defun highest-first(x y) \r\n  (let (  firsta (car x)\r\n          firstb (car y))\r\n    (>= firsta firstb) firsta firstb))\r\n```\r\n\r\n###Constructions\r\n\r\n####Conditions\r\n#####If/then/else\r\n`(if cond then else)` - evaluetes `cond` and if it's not `false` (`nil`) evaluetes `then` else evaluetes `else`\r\n\r\n```lisp\r\n(if t \"Hoooray\" \"Never will be logd\")\r\n>\"Hoooray\"\r\n\r\n(defun abs(x)\r\n  (if (>= x 0)    ;cond\r\n      x           ;then\r\n      (* -1 x)))  ;else\r\n\r\n(abs 10)\r\n>10\r\n(abs -10)\r\n>10\r\n```\r\n\r\n#####Cond\r\n`cond` has 2 signatures :\r\n\r\n`(cond test value1 result1 value2 result2 ... & default )` and `(cond test1 result1 test2 result2 ... & default)` \r\n\r\n```lisp\r\n; cond where every condition calculates \r\n(defun fac(n)\r\n  (cond \r\n    (< n 0) (throw \"Error: Argument is negative!\")\r\n    (= n 0) 1\r\n    (<= n 2) n\r\n    & (* n (fac (- n 1)))))\r\n\r\n(fac -1)\r\nError: Argument is negative!\r\n\r\n(fac 0)\r\n>1\r\n\r\n(fac 2)\r\n>2\r\n\r\n(fac 4)\r\n>24\r\n```\r\n\r\n```lisp\r\n; cond where test calculates once\r\n(defun test(n)\r\n  (cond n\r\n    1 \"Arg = 1\"\r\n    2 \"Arg = 2\"\r\n    & \"Arg != 1 and 2\"))\r\n\r\n(test 1)\r\n>\"Arg = 1\"\r\n\r\n(test 10)\r\n>\"Arg != 1 and 2\"\r\n```\r\n\r\n\r\n\r\n####Form sequences\r\n`(do form1 form2 form3 )` - repeatedly evaluetes forms and return value of last form\r\n\r\n```lisp\r\n(do \r\n  (log \"Hey!\")  \r\n  (log \"You!\")\r\n  (let (x 10 y 20)\r\n    (+ x y))\r\n)\r\nHey\r\nYou\r\n>30\r\n```\r\n\r\n####Applications\r\n`(apply fn list)` - applies given function to the list\r\n\r\n```lisp\r\n(apply + (1 2 3))\r\n>6\r\n(apply set (\"alpha\" \"betta\" \"gamma\"))\r\n>#SET: <( \"alpha\" \"betta\" \"gamma\" ) >\r\n```\r\n\r\n###Data types\r\n\r\n####Lists\r\n  - `(list 1 2 3)` - creates list  `(1 2 3)`\r\n  - `(car (1 2 3)` - takes head of list `1`\r\n  - `(cdr (1 2 3)` - takes rest of list `(2 3)`\r\n  - `(cons 1 (2 3)` - concats args to list `(1 2 3)`\r\n  - `(length (1 2 3)` - return count of elements of list `3`\r\n\r\n###Methods\r\n  - `(map fn list)` - applies given function to the each list element return new list\r\n\r\n```lisp\r\n(defun square(x) (* x x))\r\n\r\n(map square (1 2 3 4))\r\n>(1 4 9 16)\r\n```\r\n\r\n  - `(filter fn list)` - filters list by given function\r\n\r\n```lisp\r\n(defun odd?(x) (not (eq? 0 (mod x 2))))\r\n\r\n(filter odd? (1 2 3 4 5 6 7))\r\n>(1 3 5 7)\r\n```\r\n\r\n  - `(reduce fn list)` - reduce list by given function\r\n\r\n```lisp\r\n(defun average(count)\r\n  (let (sum (reduce + (range count))) \r\n    (log (str \"count is \" count))\r\n    (/ sum count)))\r\n\r\n(average 10)\r\n>5.5\r\n(average 20)\r\n>10.5\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}